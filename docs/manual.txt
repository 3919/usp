This is reference of protocol used in Unified Sharing Platform


// !--- Server !--- //

Server's responsobility is to handle predefined requests from
USP's clients. It listenes on port 53025. Each request must
be ended with endline to indicate end of message. Each
message cant be longer than 1024 bytes. Available requests:

--------
1. GET

   Description:
	  Server sends requested file if it is   
    shared otherwise connection is closed.
		
		Caution:
		 If file path contains '..' path traversal
		 attempt is signaled and connection is closed
		
   Communication form:
	 	Client sends 'GET <filename>\n'
		Server sends '{File header -- defined in section FILE HEADER}{File contents}'
		Server closes connection
		Client closes connection
---------

---------
2. GETLIST

   Description:
    Server sends list of shared files with
    others that are ready to download.
		Each filename is seprated with '\0'
		and whole message is ended with '\n'
 
   Communication form:
	 	Client sends 'GETLIST\n'
		Server sends '{File1 name}\0{File2 name}\0...{FileX name}\0\n'
		Server closes connection
		Client closes connection

---------

---------
3. PING
    
	 Description:
    Used to check if server is present at
	  given host's machine. Servers sends back
		PONG with it's username

   Communication form:
	 	Client sends 'PING\n'
		Server sends 'PONG_USP <server_username>\n'
		Server closes connection
		Client closes connection
---------

*** Server config file ***
	Server needs config file to run. Config should be placed in settings/settings.ini
	relative to server's script path. Required section of config is [main] and required
	fields in [main] are shared_path and shared_name.

	Minimalistic config file whould look like these:

		[main]
		shared_path=C:\Users\hlz\Desktop\shared
		shared_name=holz

	Valid settings:
	
		shared_path
		shared_name

*** ------------------- ****

// !--- FILE HEADER !--- //

// Each field is packed little endian
// filesize is then packed little endian
// but sha256 is array type, so its like big endian packed
struct FileHeader
{
	uint64_t filesize;       // Only file's size not header
	uint8_t sha256_hash[32]; // hash of file not header
};

